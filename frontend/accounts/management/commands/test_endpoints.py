from django.core.management.base import BaseCommand
from django.conf import settings
import requests
import json

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ'

    def add_arguments(self, parser):
        parser.add_argument('username', type=str, help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        parser.add_argument('password', type=str, help='–ü–∞—Ä–æ–ª—å')
        parser.add_argument('domain', type=str, help='–î–æ–º–µ–Ω')

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        domain = options['domain']
        
        self.stdout.write(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints API –¥–ª—è {username}@{domain}")
        self.stdout.write("=" * 70)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        auth_url = f"{settings.AUTH_CONFIG['EXTERNAL_API']['BASE_URL']}/login"
        auth_data = {
            'username': username,
            'password': password,
            'domain': domain
        }
        
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            self.stdout.write("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            response = requests.post(auth_url, json=auth_data, timeout=30)
            
            if response.status_code != 200:
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return
                
            token_data = response.json()
            access_token = token_data.get('access_token')
            
            if not access_token:
                self.stdout.write("‚ùå Access token –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return
                
            self.stdout.write("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints
            base_url = settings.AUTH_CONFIG['EXTERNAL_API']['BASE_URL']
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints –¥–ª—è –≥—Ä—É–ø–ø
            possible_endpoints = [
                '/domain/user/groups',
                '/user/groups',
                '/groups',
                '/user/domain/groups',
                '/auth/domain/user/groups',
                '/auth/user/groups',
                '/auth/groups',
                '/api/v1/auth/domain/user/groups',
                '/api/v1/auth/user/groups',
                '/api/v1/auth/groups'
            ]
            
            self.stdout.write("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø:")
            self.stdout.write("-" * 50)
            
            for endpoint in possible_endpoints:
                full_url = f"{base_url}{endpoint}"
                self.stdout.write(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
                
                try:
                    response = requests.get(full_url, headers=headers, timeout=10)
                    self.stdout.write(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    
                    if response.status_code == 200:
                        self.stdout.write("  ‚úÖ –£–°–ü–ï–•! Endpoint –Ω–∞–π–¥–µ–Ω!")
                        try:
                            data = response.json()
                            self.stdout.write(f"  –û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=4)}")
                        except:
                            self.stdout.write(f"  –û—Ç–≤–µ—Ç: {response.text}")
                        break
                    elif response.status_code == 404:
                        self.stdout.write("  ‚ùå Not Found")
                    elif response.status_code == 401:
                        self.stdout.write("  ‚ùå Unauthorized")
                    elif response.status_code == 403:
                        self.stdout.write("  ‚ùå Forbidden")
                    else:
                        self.stdout.write(f"  ‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: {response.status_code}")
                        
                except Exception as e:
                    self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            self.stdout.write("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ API:")
            self.stdout.write("-" * 30)
            
            try:
                response = requests.get(base_url, timeout=10)
                self.stdout.write(f"–ë–∞–∑–æ–≤—ã–π URL: {base_url}")
                self.stdout.write(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                if response.content:
                    self.stdout.write(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
            except Exception as e:
                self.stdout.write(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ API: {e}")
                
        except Exception as e:
            self.stdout.write(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            self.stdout.write(f"Traceback: {traceback.format_exc()}")
