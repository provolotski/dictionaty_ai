from django.core.management.base import BaseCommand
from django.utils import timezone
from accounts.models import LoginAudit, UserGroup
from datetime import timedelta


class Command(BaseCommand):
    help = '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞ –ª–æ–≥–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)'
        )
        parser.add_argument(
            '--username',
            type=str,
            help='–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
        parser.add_argument(
            '--status',
            type=str,
            choices=['success', 'failed', 'blocked'],
            help='–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤—Ö–æ–¥–∞'
        )
        parser.add_argument(
            '--show-groups',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        )
    
    def handle(self, *args, **options):
        days = options['days']
        username_filter = options['username']
        status_filter = options['status']
        show_groups = options['show_groups']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_date = timezone.now() - timedelta(days=days)
        
        self.stdout.write(f"–ê—É–¥–∏—Ç –ª–æ–≥–∏–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
        self.stdout.write("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
        audit_queryset = LoginAudit.objects.filter(login_time__gte=start_date)
        
        if username_filter:
            audit_queryset = audit_queryset.filter(username__icontains=username_filter)
            self.stdout.write(f"–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username_filter}")
        
        if status_filter:
            audit_queryset = audit_queryset.filter(status=status_filter)
            self.stdout.write(f"–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status_filter}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_attempts = audit_queryset.count()
        successful_logins = audit_queryset.filter(status='success').count()
        failed_logins = audit_queryset.filter(status='failed').count()
        blocked_logins = audit_queryset.filter(status='blocked').count()
        
        self.stdout.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}")
        self.stdout.write(f"–£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {successful_logins}")
        self.stdout.write(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {failed_logins}")
        self.stdout.write(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_logins}")
        self.stdout.write("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if total_attempts > 0:
            self.stdout.write("–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
            self.stdout.write("-" * 60)
            
            for audit in audit_queryset.order_by('-login_time')[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
                status_icon = {
                    'success': '‚úÖ',
                    'failed': '‚ùå',
                    'blocked': 'üö´'
                }.get(audit.status, '‚ùì')
                
                self.stdout.write(
                    f"{status_icon} {audit.username}@{audit.domain} "
                    f"({audit.ip_address}) - {audit.login_time.strftime('%d.%m.%Y %H:%M:%S')}"
                )
                
                if audit.error_message:
                    self.stdout.write(f"    –û—à–∏–±–∫–∞: {audit.error_message}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if show_groups:
            self.stdout.write("")
            self.stdout.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            self.stdout.write("-" * 60)
            
            groups_queryset = UserGroup.objects.all()
            if username_filter:
                groups_queryset = groups_queryset.filter(username__icontains=username_filter)
            
            for group in groups_queryset.order_by('username', 'domain'):
                self.stdout.write(
                    f"üë§ {group.username}@{group.domain} - {group.group_name} "
                    f"(–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {group.last_updated.strftime('%d.%m.%Y %H:%M:%S')})"
                )
        
        if total_attempts == 0:
            self.stdout.write(self.style.WARNING("–ó–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
